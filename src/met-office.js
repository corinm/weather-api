const Promise = require('promise');
const rp = require('request-promise');
const Location = require('./location').Location;
var GeoTree = require('geo-tree');

class MetOffice {

  constructor() {
    // Options for requesting all Met Office locations
    this._optionsLocationRequest = {
      uri: 'http://datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json/sitelist',
      qs: {
        key: process.env.MET_KEY
      },
      json: true
    };

    this._optionsLatLongFromPostcode = {
      uri: 'https://api.postcodes.io/postcodes',
      qs: {
        q: ''
      },
      json: true
    };

    this._optionsTreeCreate = {
      method: 'POST',
      uri: process.env.TREE_API_URL + '/tree/create',
      body: {
        locations: []
      },
      json: true
    };

    // Blank array of Met Office locations
    this._metLocations = [];
  };

  getWeather(postcode, apiKey) {

    this.getMetOfficeLocations() // A promise
      .then((locations) => {
        // Create tree
        this.createTree(locations)
          .then((idOfTree) => {
            console.log("Tree created");
            console.log(idOfTree);

            // TODO: Query tree
          });

      })
  };

  /*
   * Returns Promise of an array of Met Office weather locations
   */
  getMetOfficeLocations() {

    return rp(this._optionsLocationRequest)
      .then((data) => {
        return data.Locations.Location

          // Convert into GeoTree object where data is Location object
          .map(location => {
            return {
              key1: parseInt(location.latitude),
              key2: parseInt(location.longitude),
              data: {
                id: location.id,
                name: location.name,
                area: location.unitaryAuthArea
              }
            };
          });
      })
      .catch((error) => {
        console.error(error);
      })

  };

  /*
   * Accepts a list of Location objects, returns id of created tree generated by kd-tree-api
   */
  createTree(locations) {

    let optionsTreeCreate = this._optionsTreeCreate;
    optionsTreeCreate.body = locations;

    return rp(optionsTreeCreate)
      .then((response) => {
        return response.id;
      })
      .catch(function (err) {
        console.error(err);
      });
  };

  /*
   * Accepts a postcode, returns lat and long as an object
   */
  getMyLatLong(postcode) {
    let options = this._optionsLatLongFromPostcode;
    options.qs.q = postcode;
    return rp(options)
      .then((response) => {
        return response.result[0];
      })
      .then((location) => {
        let a = {
          lat: parseInt(location.latitude),
          lng: parseInt(location.longitude)
        }
        // console.log(a);
        return a;
      });
  };

}

module.exports.MetOffice = MetOffice;
